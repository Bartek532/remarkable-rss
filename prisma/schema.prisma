// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SyncStatus {
  SUCCESS
  FAILED
  PENDING
  UNKNOWN
}

enum SyncTrigger {
  MANUAL
  SCHEDULE
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  folder        String    @default("RSS")

  device   Device?
  accounts Account[]
  sessions Session[]
  feeds    UserFeed[]
  syncs    Sync[]
}

model Device {
  id           Int      @id @default(autoincrement())
  token        String   @unique
  registeredAt DateTime @default(now())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feed {
  id    Int        @id @default(autoincrement())
  url   String     @unique
  users UserFeed[]
}

model UserFeed {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  feedId             Int
  feed               Feed      @relation(fields: [feedId], references: [id], onDelete: Cascade)
  lastSyncDate       DateTime?
  startArticlesCount Int       @default(1)

  @@unique([userId, feedId])
}

model Sync {
  id                  String      @id @default(uuid())
  startedAt           DateTime    @default(now())
  finishedAt          DateTime?
  status              SyncStatus
  trigger             SyncTrigger
  syncedArticlesCount Int         @default(0)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  log    Log?
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  json      Json

  sync   Sync   @relation(fields: [syncId], references: [id])
  syncId String @unique
}
